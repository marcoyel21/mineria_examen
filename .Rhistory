#Segundo, calculo las regresiones cuantílicas para cada variable
final_reg<- lm(muestra$a~efe_1, data = cross_final)
return(final_reg)
}
proceso_lineal(pib)
View(pib)
pib <- read.csv("data.csv")
pib$t<-NULL
#editamos nuestra función de proceso para que contemple regresiones lineales
#Para hacer este ejercicio agrupo los pasos que realice en una función.
proceso_lineal <- function(muestra) {
#Calculo las regresiones cuantílicas para cada variable
coefs_raw<-lapply(seq_len(ncol(muestra)),function(i)          {coef(lm(muestra$a~muestra[,i]))})
coefs <- data.frame(matrix(unlist(coefs_raw), nrow=length(coefs_raw), byrow=T))
#Extraigo los coeficientes
coefs <- data.frame(matrix(unlist(coefs_raw), nrow=length(coefs_raw), byrow=T))
#Edito el data frame para que esté ordenado
coefs<-coefs %>% mutate (Var=paste("x",1:8, sep = ""))
colnames(coefs) <- paste(c("B0","B1","Var"))
#PARTE B
# Preparo un data frame donde pueda encontrar para cada t, todas las xs y las bs.
x_transpose <- as.data.frame(t(as.matrix(muestra)))
cross<-cbind(x_transpose,coefs)
#Quitamos las variables extra de tal manera que podamos hacer un lapply limpio
cross$Var <- NULL
cross$B0 <- NULL
#Calculo las regresiones para cada t
coefs_raw_t<-lapply(seq_len(ncol(cross)),function(i) {coef(lm(cross[,i]~cross$B1))})
#Extraigo solamente los coeficientes de los objetos generados
coefs_t <- data.frame(matrix(unlist(coefs_raw_t), nrow=length(coefs_raw_t), byrow=T))
#Edito el data frame para que esté ordenado
colnames(coefs_t) <- paste(c("alpha","efe_1"))
#Elimino el último renglon que es la regresión de una variable consigo misma
coefs_t <- coefs_t[-nrow(coefs_t),]
#PARTE C
#Prepar una base de datos con las efes relacionadas con las ys
cross_final<-cbind(coefs_t,muestra$a)
#Segundo, calculo las regresiones cuantílicas para cada variable
final_reg<- lm(muestra$a~efe_1, data = cross_final)
return(final_reg)
}
proceso_lineal(pib)
pib <- read.csv("data.csv")
pib$t<-NULL
#editamos nuestra función de proceso para que contemple regresiones lineales
#Para hacer este ejercicio agrupo los pasos que realice en una función.
proceso_lineal <- function(muestra) {
#Calculo las regresiones cuantílicas para cada variable
coefs_raw<-lapply(seq_len(ncol(muestra)),function(i)          {coef(lm(muestra$a~muestra[,i]))})
coefs <- data.frame(matrix(unlist(coefs_raw), nrow=length(coefs_raw), byrow=T))
#Extraigo los coeficientes
coefs <- data.frame(matrix(unlist(coefs_raw), nrow=length(coefs_raw), byrow=T))
#Edito el data frame para que esté ordenado
coefs<-coefs %>% mutate (Var=paste("x",1:8, sep = ""))
colnames(coefs) <- paste(c("B0","B1","Var"))
#PARTE B
# Preparo un data frame donde pueda encontrar para cada t, todas las xs y las bs.
x_transpose <- as.data.frame(t(as.matrix(muestra)))
cross<-cbind(x_transpose,coefs)
#Quitamos las variables extra de tal manera que podamos hacer un lapply limpio
cross$Var <- NULL
cross$B0 <- NULL
#Calculo las regresiones para cada t
coefs_raw_t<-lapply(seq_len(ncol(cross)),function(i) {coef(lm(cross[,i]~cross$B1))})
#Extraigo solamente los coeficientes de los objetos generados
coefs_t <- data.frame(matrix(unlist(coefs_raw_t), nrow=length(coefs_raw_t), byrow=T))
#Edito el data frame para que esté ordenado
colnames(coefs_t) <- paste(c("alpha","efe_1"))
#Elimino el último renglon que es la regresión de una variable consigo misma
coefs_t <- coefs_t[-nrow(coefs_t),]
#PARTE C
#Prepar una base de datos con las efes relacionadas con las ys
cross_final<-cbind(coefs_t,muestra$a)
#Segundo, calculo las regresiones cuantílicas para cada variable
final_reg<- lm(muestra$a~efe_1, data = cross_final)
return(final_reg)
}
proceso_lineal(pib)
pib <- read.csv("data.csv")
pib$t<-NULL
#editamos nuestra función de proceso para que contemple regresiones lineales
#Para hacer este ejercicio agrupo los pasos que realice en una función.
proceso_lineal <- function(muestra) {
#Calculo las regresiones cuantílicas para cada variable
coefs_raw<-lapply(seq_len(ncol(muestra)),function(i)          {coef(lm(muestra$a~muestra[,i]))})
coefs <- data.frame(matrix(unlist(coefs_raw), nrow=length(coefs_raw), byrow=T))
#Extraigo los coeficientes
coefs <- data.frame(matrix(unlist(coefs_raw), nrow=length(coefs_raw), byrow=T))
#Edito el data frame para que esté ordenado
coefs<-coefs %>% mutate (Var=paste("x",1:9, sep = ""))
colnames(coefs) <- paste(c("B0","B1","Var"))
#PARTE B
# Preparo un data frame donde pueda encontrar para cada t, todas las xs y las bs.
x_transpose <- as.data.frame(t(as.matrix(muestra)))
cross<-cbind(x_transpose,coefs)
#Quitamos las variables extra de tal manera que podamos hacer un lapply limpio
cross$Var <- NULL
cross$B0 <- NULL
#Calculo las regresiones para cada t
coefs_raw_t<-lapply(seq_len(ncol(cross)),function(i) {coef(lm(cross[,i]~cross$B1))})
#Extraigo solamente los coeficientes de los objetos generados
coefs_t <- data.frame(matrix(unlist(coefs_raw_t), nrow=length(coefs_raw_t), byrow=T))
#Edito el data frame para que esté ordenado
colnames(coefs_t) <- paste(c("alpha","efe_1"))
#Elimino el último renglon que es la regresión de una variable consigo misma
coefs_t <- coefs_t[-nrow(coefs_t),]
#PARTE C
#Prepar una base de datos con las efes relacionadas con las ys
cross_final<-cbind(coefs_t,muestra$a)
#Segundo, calculo las regresiones cuantílicas para cada variable
final_reg<- lm(muestra$a~efe_1, data = cross_final)
return(final_reg)
}
proceso_lineal(pib)
pib <- read.csv("data.csv")
pib$t<-NULL
mylist<-y[-1]
newelem <- 0
y_2 <- c(mylist, newelem)
x<-cbind(pib,y_2)
#editamos nuestra función de proceso para que contemple regresiones lineales
#Para hacer este ejercicio agrupo los pasos que realice en una función.
proceso_lineal <- function(muestra) {
#Calculo las regresiones cuantílicas para cada variable
coefs_raw<-lapply(seq_len(ncol(muestra)),function(i)          {coef(lm(muestra$y_2~muestra[,i]))})
coefs <- data.frame(matrix(unlist(coefs_raw), nrow=length(coefs_raw), byrow=T))
#Extraigo los coeficientes
coefs <- data.frame(matrix(unlist(coefs_raw), nrow=length(coefs_raw), byrow=T))
#Edito el data frame para que esté ordenado
coefs<-coefs %>% mutate (Var=paste("x",1:9, sep = ""))
colnames(coefs) <- paste(c("B0","B1","Var"))
#PARTE B
# Preparo un data frame donde pueda encontrar para cada t, todas las xs y las bs.
x_transpose <- as.data.frame(t(as.matrix(muestra)))
cross<-cbind(x_transpose,coefs)
#Quitamos las variables extra de tal manera que podamos hacer un lapply limpio
cross$Var <- NULL
cross$B0 <- NULL
#Calculo las regresiones para cada t
coefs_raw_t<-lapply(seq_len(ncol(cross)),function(i) {coef(lm(cross[,i]~cross$B1))})
#Extraigo solamente los coeficientes de los objetos generados
coefs_t <- data.frame(matrix(unlist(coefs_raw_t), nrow=length(coefs_raw_t), byrow=T))
#Edito el data frame para que esté ordenado
colnames(coefs_t) <- paste(c("alpha","efe_1"))
#Elimino el último renglon que es la regresión de una variable consigo misma
coefs_t <- coefs_t[-nrow(coefs_t),]
#PARTE C
#Prepar una base de datos con las efes relacionadas con las ys
cross_final<-cbind(coefs_t,muestra$y_2)
#Segundo, calculo las regresiones cuantílicas para cada variable
final_reg<- lm(muestra$y_2~efe_1, data = cross_final)
return(final_reg)
}
proceso_lineal(pib)
pib <- read.csv("data.csv")
pib$t<-NULL
mylist<-y[-1]
newelem <- 0
y_2 <- c(mylist, newelem)
pib<-cbind(pib,y_2)
#editamos nuestra función de proceso para que contemple regresiones lineales
#Para hacer este ejercicio agrupo los pasos que realice en una función.
proceso_lineal <- function(muestra) {
#Calculo las regresiones cuantílicas para cada variable
coefs_raw<-lapply(seq_len(ncol(muestra)),function(i)          {coef(lm(muestra$y_2~muestra[,i]))})
coefs <- data.frame(matrix(unlist(coefs_raw), nrow=length(coefs_raw), byrow=T))
#Extraigo los coeficientes
coefs <- data.frame(matrix(unlist(coefs_raw), nrow=length(coefs_raw), byrow=T))
#Edito el data frame para que esté ordenado
coefs<-coefs %>% mutate (Var=paste("x",1:9, sep = ""))
colnames(coefs) <- paste(c("B0","B1","Var"))
#PARTE B
# Preparo un data frame donde pueda encontrar para cada t, todas las xs y las bs.
x_transpose <- as.data.frame(t(as.matrix(muestra)))
cross<-cbind(x_transpose,coefs)
#Quitamos las variables extra de tal manera que podamos hacer un lapply limpio
cross$Var <- NULL
cross$B0 <- NULL
#Calculo las regresiones para cada t
coefs_raw_t<-lapply(seq_len(ncol(cross)),function(i) {coef(lm(cross[,i]~cross$B1))})
#Extraigo solamente los coeficientes de los objetos generados
coefs_t <- data.frame(matrix(unlist(coefs_raw_t), nrow=length(coefs_raw_t), byrow=T))
#Edito el data frame para que esté ordenado
colnames(coefs_t) <- paste(c("alpha","efe_1"))
#Elimino el último renglon que es la regresión de una variable consigo misma
coefs_t <- coefs_t[-nrow(coefs_t),]
#PARTE C
#Prepar una base de datos con las efes relacionadas con las ys
cross_final<-cbind(coefs_t,muestra$y_2)
#Segundo, calculo las regresiones cuantílicas para cada variable
final_reg<- lm(muestra$y_2~efe_1, data = cross_final)
return(final_reg)
}
proceso_lineal(pib)
View(pib)
pib <- read.csv("data.csv")
pib$t<-NULL
mylist<-y[-1]
newelem <- 0
y_2 <- c(mylist, newelem)
pib<-cbind(pib,y_2)
pib$a<-NULL
#editamos nuestra función de proceso para que contemple regresiones lineales
#Para hacer este ejercicio agrupo los pasos que realice en una función.
proceso_lineal <- function(muestra) {
#Calculo las regresiones cuantílicas para cada variable
coefs_raw<-lapply(seq_len(ncol(muestra)),function(i)          {coef(lm(muestra$y_2~muestra[,i]))})
coefs <- data.frame(matrix(unlist(coefs_raw), nrow=length(coefs_raw), byrow=T))
#Extraigo los coeficientes
coefs <- data.frame(matrix(unlist(coefs_raw), nrow=length(coefs_raw), byrow=T))
#Edito el data frame para que esté ordenado
coefs<-coefs %>% mutate (Var=paste("x",1:9, sep = ""))
colnames(coefs) <- paste(c("B0","B1","Var"))
#PARTE B
# Preparo un data frame donde pueda encontrar para cada t, todas las xs y las bs.
x_transpose <- as.data.frame(t(as.matrix(muestra)))
cross<-cbind(x_transpose,coefs)
#Quitamos las variables extra de tal manera que podamos hacer un lapply limpio
cross$Var <- NULL
cross$B0 <- NULL
#Calculo las regresiones para cada t
coefs_raw_t<-lapply(seq_len(ncol(cross)),function(i) {coef(lm(cross[,i]~cross$B1))})
#Extraigo solamente los coeficientes de los objetos generados
coefs_t <- data.frame(matrix(unlist(coefs_raw_t), nrow=length(coefs_raw_t), byrow=T))
#Edito el data frame para que esté ordenado
colnames(coefs_t) <- paste(c("alpha","efe_1"))
#Elimino el último renglon que es la regresión de una variable consigo misma
coefs_t <- coefs_t[-nrow(coefs_t),]
#PARTE C
#Prepar una base de datos con las efes relacionadas con las ys
cross_final<-cbind(coefs_t,muestra$y_2)
#Segundo, calculo las regresiones cuantílicas para cada variable
final_reg<- lm(muestra$y_2~efe_1, data = cross_final)
return(final_reg)
}
proceso_lineal(pib)
arimaModel_1=arima(pib, order=c(0,1,2))
install.packages("tseries", dependencies = TRUE)
install.packages("astsa", dependencies = TRUE)
install.packages("forecast", dependencies = TRUE)
library(tseries)
library(astsa)
library(forecast)
arr <- ts(pib[,2], frequency=1)
arimaModel_1=arima(pib, order=c(0,1,2))
arr <- ts(pib[,2], frequency=1)
ar_pib <- read.csv("data.csv")
library(tseries)
library(astsa)
library(forecast)
ar_pib <- read.csv("data.csv")
arr <- ts(ar_pib, frequency=1)
arimaModel_1=arima(ar_pib$a, order=c(0,1,2))
arimaModel_1=arima(ar_pib$a, order=c(0,1,2))
arimaModel_1
plot.ts(ar_pib$a)
dec.dif <- decompose(ar_pib$a)
dec.dif <- decompose(arr)
dec.dif <- decompose(ar_pib)
dec.dif <- decompose(arr)
dif <- ts(ar_pib[,2], frequency=11, start=c(1980, 2019))
dec.dif <- decompose(dif)
plot(dec.dif)
dif <- ts(ar_pib[,1], frequency=11, start=c(1980, 2019))
dec.dif <- decompose(dif)
plot(dec.dif)
dif <- ts(ar_pib[,2], frequency=11, start=c(1980, 2019))
dec.dif <- decompose(dif)
plot(dec.dif)
arimaModel_1=arima(ar_pib$a, order=c(0,1,2))
arimaModel_1
summary(arimaModel_1)
summary(proceso_lineal(pib))
summary(arimaModel_1)
ls
install.packages("readstata13")
library(tidyverse)
library(stargazer)
library(readstata13)
library(MASS)
hogares<-read.dta13('ESRU-EMOVI 2017 Hogar.dta', encoding='Latin1')
getwd()
setwd("/Users/marcoyel21/Desktop/data")
hogares<-read.dta13('ESRU-EMOVI 2017 Hogar.dta', encoding='Latin1')
entrevistado<-read.dta13('ESRU-EMOVI 2017 Entrevistado.dta', encoding='Latin1')
# variable de escolaridad en años
entrevistado$p13<-as.numeric(entrevistado$p13)
entrevistado$p14<-as.numeric(entrevistado$p14)
entrevistado$p43<-as.numeric(entrevistado$p43)
entrevistado$p44<-as.numeric(entrevistado$p44)
entrevistado$p43m<-as.numeric(entrevistado$p43m)
entrevistado$p44m<-as.numeric(entrevistado$p44m)
entrevistado$p44m<-as.numeric(entrevistado$p44m)
entrevistado<-entrevistado %>%
mutate(escolaridadhije = ifelse(p13==1|p13==13, 0,
ifelse(p13==2,p14,
ifelse((p13==3|p13==4),6+p14,
ifelse((p13==5|p13==6|p13==7|p13==9),9+p14,
ifelse((p13==8|p13==10|p13==11),12+p14,
16+p14))))))
entrevistado<-entrevistado %>%
mutate(escolaridadpadre = ifelse(p43==1|p43==13, 0,
ifelse(p43==2,p44,
ifelse(p43==3|p43==4,6+p44,
ifelse(p43==5|p43==6|p43==7|p43==9,9+p44,
ifelse(p43==8|p43==10|p43==11,12+p44,
16+p44))))))
entrevistado<-entrevistado %>%
mutate(escolaridadmadre = ifelse(p43m==1|p43m==13, 0,
ifelse(p43m==2,p44m,
ifelse(p43m==3|p43m==4,6+p44m,
ifelse(p43m==5|p43m==6|p43m==7|p43m==9,9+p44m,
ifelse(p43m==8|p43m==10|p43m==11,12+p44m,
16+p44m))))))
quantile(as.numeric(entrevistado$escolaridadhije), probs=seq(0,1,0.05), na.rm=T)
quantile(as.numeric(entrevistado$escolaridadmadre), probs=seq(0,1,0.05), na.rm=T)
quantile(as.numeric(entrevistado$escolaridadpadre), probs=seq(0,1,0.05), na.rm=T)
#escolaridad promedio de los padres
entrevistado<-entrevistado %>%  mutate(escolaridadpromediopadres=(escolaridadmadre+escolaridadpadre)/2)
#variable de movilidd ascendente en educación
entrevistado<-entrevistado %>%
mutate(movilidadascendente1=ifelse(escolaridadhije>escolaridadpromediopadres,1,0))
#si hubo movilidad contra escolaridad promedio de los padres, color de piel, sexo y región del país (NOTA=falta meterles factores de expansión)
modelo1<- glm( movilidadascendente1 ~ escolaridadpromediopadres + p151 + p06 + region, family = binomial(link = "logit"),
data = entrevistado)
modelo1
modelo2<- polr( p133 ~ escolaridadpromediopadres + escolaridadhije + p151 + p06 + region, method ='probit' ,
data = entrevistado)
modelo2
write.csv(entrevistado,"data.csv")
library(tidyverse)
library(stargazer)
library(readstata13)
library(MASS)
setwd("/Users/marcoyel21/Desktop/data")
hogares<-read.dta13('ESRU-EMOVI 2017 Hogar.dta', encoding='Latin1')
entrevistado<-read.dta13('ESRU-EMOVI 2017 Entrevistado.dta', encoding='Latin1')
# variable de escolaridad en años
entrevistado$p13<-as.numeric(entrevistado$p13)
entrevistado$p14<-as.numeric(entrevistado$p14)
entrevistado$p43<-as.numeric(entrevistado$p43)
entrevistado$p44<-as.numeric(entrevistado$p44)
entrevistado$p43m<-as.numeric(entrevistado$p43m)
entrevistado$p44m<-as.numeric(entrevistado$p44m)
entrevistado$p44m<-as.numeric(entrevistado$p44m)
entrevistado<-entrevistado %>%
mutate(escolaridadhije = ifelse(p13==1|p13==13, 0,
ifelse(p13==2,p14,
ifelse((p13==3|p13==4),6+p14,
ifelse((p13==5|p13==6|p13==7|p13==9),9+p14,
ifelse((p13==8|p13==10|p13==11),12+p14,
16+p14))))))
entrevistado<-entrevistado %>%
mutate(escolaridadpadre = ifelse(p43==1|p43==13, 0,
ifelse(p43==2,p44,
ifelse(p43==3|p43==4,6+p44,
ifelse(p43==5|p43==6|p43==7|p43==9,9+p44,
ifelse(p43==8|p43==10|p43==11,12+p44,
16+p44))))))
entrevistado<-entrevistado %>%
mutate(escolaridadmadre = ifelse(p43m==1|p43m==13, 0,
ifelse(p43m==2,p44m,
ifelse(p43m==3|p43m==4,6+p44m,
ifelse(p43m==5|p43m==6|p43m==7|p43m==9,9+p44m,
ifelse(p43m==8|p43m==10|p43m==11,12+p44m,
16+p44m))))))
#calcular los cuantiles de escolaridad
quantile(as.numeric(entrevistado$escolaridadhije), probs=seq(0,1,0.05), na.rm=T)
quantile(as.numeric(entrevistado$escolaridadmadre), probs=seq(0,1,0.05), na.rm=T)
quantile(as.numeric(entrevistado$escolaridadpadre), probs=seq(0,1,0.05), na.rm=T)
#escolaridad promedio de los padres
entrevistado<-entrevistado %>%  mutate(escolaridadpromediopadres=(escolaridadmadre+escolaridadpadre)/2)
#variable de movilidd ascendente en educación
entrevistado<-entrevistado %>%
mutate(movilidadascendente1=ifelse(escolaridadhije>escolaridadpromediopadres,1,0))
write.csv(entrevistado,"data.csv")
#ejemplos de modelos
#si hubo movilidad contra escolaridad promedio de los padres, color de piel, sexo y región del país (NOTA=falta meterles factores de expansión)
modelo1<- glm( movilidadascendente1 ~ escolaridadpromediopadres + p151 + p06 + region, family = binomial(link = "logit"),
data = entrevistado)
modelo1
modelo2<- polr( p133 ~ escolaridadpromediopadres + escolaridadhije + p151 + p06 + region, method ='probit' ,
data = entrevistado)
modelo2
View(entrevistado)
entrevistado <- entrevistado %>%
select(movilidadascendente1, everything())
View(entrevistado)
#variable de movilidd ascendente en educación
entrevistado<-entrevistado %>%
mutate(movilidadascendente1=ifelse(escolaridadhije>escolaridadpadre ,1,0))
entrevistado <- entrevistado %>%
select(movilidadascendente1, everything())
write.csv(entrevistado,"data.csv")
View(entrevistado)
View(entrevistado)
entrevistado$folio<-NULL
entrevistado$folio_ageb<-NULL
write.csv(entrevistado,"data.csv")
entrevistado <-entrevistado %>% drop_na(movilidadascendente1)
write.csv(entrevistado,"data.csv")
View(entrevistado)
entrevistado$Latitud<-NULL
entrevistado$LatitudGP<-NULL
entrevistado$Longitud<-NULL
entrevistado$LongitudGP<-NULL
View(entrevistado)
write.csv(entrevistado,"data.csv")
x<-cor(entrevistado, method = c("pearson"))
x<-cor(entrevistado)
entrevistado<-read.dta13('ESRU-EMOVI 2017 Entrevistado.dta', encoding='Latin1')
entrevistado<-read.dta13('ESRU-EMOVI 2017 Entrevistado.dta', encoding='Latin1')
entrevistado<-read.dta13('ESRU-EMOVI 2017 Entrevistado.dta', encoding='Latin1')
View(hogares)
View(entrevistado)
View(entrevistado)
# variable de escolaridad en años
entrevistado$p13<-as.numeric(entrevistado$p13)
entrevistado$p14<-as.numeric(entrevistado$p14)
entrevistado$p43<-as.numeric(entrevistado$p43)
entrevistado$p44<-as.numeric(entrevistado$p44)
entrevistado$p43m<-as.numeric(entrevistado$p43m)
entrevistado$p44m<-as.numeric(entrevistado$p44m)
entrevistado$p44m<-as.numeric(entrevistado$p44m)
entrevistado<-entrevistado %>%
mutate(escolaridadhije = ifelse(p13==1|p13==13, 0,
ifelse(p13==2,p14,
ifelse((p13==3|p13==4),6+p14,
ifelse((p13==5|p13==6|p13==7|p13==9),9+p14,
ifelse((p13==8|p13==10|p13==11),12+p14,
16+p14))))))
entrevistado<-entrevistado %>%
mutate(escolaridadpadre = ifelse(p43==1|p43==13, 0,
ifelse(p43==2,p44,
ifelse(p43==3|p43==4,6+p44,
ifelse(p43==5|p43==6|p43==7|p43==9,9+p44,
ifelse(p43==8|p43==10|p43==11,12+p44,
16+p44))))))
entrevistado<-entrevistado %>%
mutate(escolaridadmadre = ifelse(p43m==1|p43m==13, 0,
ifelse(p43m==2,p44m,
ifelse(p43m==3|p43m==4,6+p44m,
ifelse(p43m==5|p43m==6|p43m==7|p43m==9,9+p44m,
ifelse(p43m==8|p43m==10|p43m==11,12+p44m,
16+p44m))))))
quantile(as.numeric(entrevistado$escolaridadhije), probs=seq(0,1,0.05), na.rm=T)
quantile(as.numeric(entrevistado$escolaridadmadre), probs=seq(0,1,0.05), na.rm=T)
quantile(as.numeric(entrevistado$escolaridadpadre), probs=seq(0,1,0.05), na.rm=T)
#escolaridad promedio de los padres
entrevistado<-entrevistado %>%  mutate(escolaridadpromediopadres=(escolaridadmadre+escolaridadpadre)/2)
#variable de movilidd ascendente en educación
entrevistado<-entrevistado %>%
mutate(movilidadascendente1=ifelse(escolaridadhije>escolaridadpadre ,1,0))
entrevistado <- entrevistado %>%
select(movilidadascendente1, everything())
entrevistado$folio<-NULL
entrevistado$folio_ageb<-NULL
entrevistado$Latitud<-NULL
entrevistado$LatitudGP<-NULL
entrevistado$Longitud<-NULL
entrevistado$LongitudGP<-NULL
entrevistado<-entrevistado[complete.cases(entrevistado), ]
View(entrevistado)
knitr::opts_chunk$set(echo = TRUE)
mydata<-read_csv("data.csv")
mydata<-read_csv("data.csv")
mydata<-read_csv("data.csv")
mydata<-read_csv("data.csv")
mydata<-read_csv("data.csv")
cd "/Users/marcoyel21/Desktop/000142244/examen_parcial"
mydata<-read_csv("data.csv")
cd "/Users/marcoyel21/Desktop/000142244/examen_parcial"
mydata<-read_csv("data.csv")
setwd( "/Users/marcoyel21/Desktop/000142244/examen_parcial")
mydata<-read_csv("data.csv")
install.packages('bookdown')
knitr::opts_chunk$set(echo = TRUE)
source("03-environment.R",   encoding = 'UTF-8')
library(readr)
library(stringr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(shinydashboard)
library(GGally)
source("metadata.R"  , encoding = 'UTF-8')
source("utils.R"     , encoding = 'UTF-8')
source("00-load.R"   , encoding = 'UTF-8')
source("01-prepare.R", encoding = 'UTF-8')
source("02-clean.R",   encoding = 'UTF-8')
source("utils.R"     , encoding = 'UTF-8')
load <- function(){
if(!file.exists('parcial.rds')){
parcial_url <- 'https://raw.githubusercontent.com/salvadormarmol/intro-to-data-science-2020/master/primer_parcial/data/imports-85.csv?token=ANVOYCU6FHVUVVUQW7DJNCS7ST3UC'
parcial_data <- read_csv(parcial_url,
col_names = colnames,
na = 'XXXXXXX')
saveRDS(parcial_data, "parcial.rds")
print('parcial.rds se bajó y guardó\n')
}
else{
warning('parcial.rds ya existe\n')
parcial_data <- readRDS("parcial.rds")
}
return(parcial_data)
}
source("utils.R"     , encoding = 'UTF-8')
source("utils.R")
source("utils.R"     , encoding = 'UTF-8')
source("03-environment.R",   encoding = 'UTF-8')
source("utils.R"  , encoding = 'UTF-8')
